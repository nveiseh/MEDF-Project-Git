Installing Packages
pip install PACKAGE
Favorite Package:
django
SciPy
NumPy
RPy

http://gbeced.github.com/pyalgotrade/ For Python algorithmic trading testing

The Simple Way

Since pip depends on setuptools, you’ll need to install that first. I’ve written a small (experimental) script to make this easier — just download getpip.py and run it in the Python interpreter. (On Mac OS or Linux, you may need to run it as ‘sudo python getpip.py’.) This will install (or upgrade) setuptools, then use easy_install to install pip.

When that’s done, you can verify that pip is installed by running:

pip help
If it works, you’re done. Wasn’t that easy?

If it didn’t work, you should try installing setuptools by following the detailed installation instructions. Once you’ve got setuptools installed, you can install pip using ‘easy_install pip’ (or ‘sudo easy_install pip’, if you’re on Mac OS or Linux).

If the installation failed because you don’t have root/administrative access to your computer, you should try The Better Way.


The Better Way: Virtualenv

If you’re a Python developer, I highly recommend that you start using virtualenv, if you don’t already. Virtualenv allows you to create local, isolated Python environments, each with a different set of installed packages. As a bonus, virtualenv installs pip into each new environment that you create, so you don’t even need to install pip globally.

You don’t even need to install virtualenv, just grab the latest version of virtualenv.py. Here’s the setup that I recommend:

Use virtualenv to create a base Python environment for your user account:

python virtualenv.py ~/venv/base
Make this environment your default Python environment by adding the following line to the bottom of your ~/.profile or ~/.bash_profile file:

source ~/venv/base/bin/activate
You can test that it’s working by opening a new terminal window and checking that ‘which python’ returns something like ~/venv/base/bin/python.

Fearlessly install new packages using pip!

Virtualenv helpfully installs pip into each virtual environment it creates. When you use this version of pip, you won’t affect the system-wide installation of Python, only your local one in ~/venv/base.

Further Reading
You can learn more about pip from the documentation. If you’re a Python developer and interested in the future of Python packaging, you should take a look at The Hitchhiker’s Guide to Packaging and the Python distutils-sig mailing list.



+++++++++++++
DJANGO NOTES


Created an app "polls"
the app contains two "models", and each "model" is an "object", that needs to be imported from polls.models

each "field", inside the "model, objects", is an entry in the database.

each "model, object, inside an app" represents a different database
each instance of the "model, object" must be saved as a variable, and that variable can be saved in the database, by p.save()

IF you want to review all the Poll objects that have been created.  Poll.objects.all()

if you want to explore the fields within an object p, simply type p.id, p.question, to see the "database" "fields"



PYTHON NOTES
+++++++++++++++++++
What are the modifiers to the file modes we can use?
The most important one to know for now is the + modifier, so you can do 'w+', 'r+', and 'a+'. This will open the file in both read and write mode, and depending on the character use position the file in different ways.

http://learnpythonthehardway.org/book/ex18.html



+++++++++++++++++++++++++
'''
cars = 100
space_in_car = 4.0
drivers = 30
passengers = 90
cars_not_driven = cars - drivers
cars_driven = drivers
carpool_capacity = cars_driven * space_in_car
avg_pass_per_car = passengers / cars_driven

my_name = 'Zed A. Shaw'
my_age = 35 # not a lie
my_height = 74 # inches
my_weight = 180 # lbs
my_eyes = 'Blue'
my_teeth = 'White'
my_hair = 'Brown'


print "There are", cars, "cars available."
print "There are only", drivers, "drivers available."
print "There will be", cars_not_driven, "empty cars today."
print "We can transport", carpool_capacity, "people today."
print "We have", passengers, "passengers to carpool today."
print "We need to put about", avg_pass_per_car, "passengers in each car today."


print "There are %s cars available." %cars
print "There are only %s drivers available." %drivers
print "There will be %s empty cars today." %cars_not_driven
print "We can transport", carpool_capacity, "people today."
print "We have", passengers, "passengers to carpool today."
print "We need to put about", avg_pass_per_car, "passengers in each car today."
print "If I add %d, %s, and %s, I get %s." %(my_age, my_height, my_weight, my_height + my_weight)
'''

'''
#Lesson 6
x = "There are %d types of people." % 10
binary = "binary"
do_not = "don't"
y = "Those who know %s and those who %s" %(binary, do_not)

print x
print y

print "I said: %s" %x
print "I also said: %s" % y

hilarious = False
joke_evaluation = "Isn't that joke so funny? %s"

print joke_evaluation % hilarious

w = "This is the left side of..."
e = "a string with a right side."
print w+e
'''

#Lesson 8: Printing, Printing
formatter = "%s %s %r %r"

print formatter %(1,2,3,4)
print formatter % ('one', "two", "three","")
print formatter % (True, False, True, False)
print formatter % (formatter, formatter, formatter, formatter)
print formatter %('I had this thing.', 'That you.', "Could Type up Right.", 'But no wories.')

tabby_cat  = "\tI'm tabbed in."
persian_Cat = "I'm split \non a line."
backslash_cat = "I'm \\ a \\ cat."

fat_Cat = """
I'll do a list:
\t* Cat food
\t* Fishies
\t* Catnip\n\t* Grass"""

print tabby_cat
print persian_Cat
print backslash_cat 
print fat_Cat




'''
print "How old are you?", 
age = int(raw_input())

print "How tall are you?"
height = raw_input()

print "How much do you weigh?",
weight  = raw_input()

print "So you are %r years old, %r tall, and %r pounds." % (age, height, weight)
'''

age = int(raw_input("How old are you?: "))

height = raw_input("How tall are you?: ")
weight = int(raw_input("How much do you weigh?: "))
print "So you are %r years old, %r tall, and %r pounds." % (age, height, weight)



Lesson 13
from sys import argv

script, first, second, third = argv

print "The script is called: ", script
print "The first variable is called: ", first
print "The second variable is called: ", second
print "The third variables is called: ", third




Lesson 14
from sys import argv

script, user_name = argv
prompt_form = " >> "

print "Hi %s, my name is %s." % (user_name, script)
print "I'd like to ask you a few questions."

print "Do you like me %s ?" %user_name
likes = raw_input(prompt_form)

print "Where do you live %s?" % user_name
lives = raw_input(prompt_form)

print "What kind of computer do you have %s?" %user_name
computer = raw_input (prompt_form)

print """
Alright, you said %s about liking me. 
You live in %r. Not sure where that is.
And you have a %s computer. Nice.
""" % (likes, lives, computer)

from sys import argv

script, filename = argv

myopenedfile = open (filename)

print "Here's your file %r : " % (filename)
print myopenedfile.read()

print "Type the file name again: "
secondfilename = raw_input('>>>')
mysecondopenedfile = open(secondfilename)

print mysecondopenedfile.read()





from sys import argv

script, filename = argv

print "We're doing to erase: %r" % filename
print "If you do not want to do that, hit CRTL + ^."
print "IF you do want that, hit return."

raw_input("?")

print "Opening the file: %s..." %filename
target = open(filename, 'w')

print "Truncating the file! Goodbye!"
target.truncate()

print "Now I'm going to ask you for 3 lines:"
line1 = raw_input("Line 1?" )
line2 = raw_input("Line 2?" )
line3 = raw_input("Line 3?" )

print "Now, I'm doing to write these to THE file..."

target.write(line1)
target.write("\n")
target.write(line2)
target.write("\n")
target.write(line3)
target.write("\n")

print "And finally, we close it."
target.close()

What does 'w' mean?
It's really just a string with a character in it for the kind of mode for the file. If you use 'w' then you're saying "open this file in 'write' mode", 
thus the 'w' character. There's also 'r' for "read", 'a' for append, and modifiers on these.
What are the modifiers to the file modes we can use?
The most important one to know for now is the + modifier, so you can do 'w+', 'r+', and 'a+'. 
This will open the file in both read and write mode, and depending on the character use position the file in different ways.


#Lesson 17, writing from between files
from sys import argv
from os.path import exists

script, from_file, to_file = argv

print "Copying from %s to %s." %(from_file, to_file)

loaded_file = open(from_file)
indata = loaded_file.read()
#File data has been read into indata 

print "The input file is %d byte long." %len(indata)

print "Does the output file really exist? %r" %exists(to_file)
print "If ready, press RETURN; otherwise, CTRL^."
raw_input()

out_file = open(to_file, 'a')
out_file.write(indata)

print ("Done!")

out_file.close()
loaded_file.close()

#Lesson 18, FUNCTIONS
def print_two(*args):
    arg1, arg2 = args
    print "arg1: %r, arg2: %r." %(arg1, arg2)

#But since *Args is actually useless, we can do something else with it
def print_two_again(arg1, arg2):
    print "arg1: %r, arg2: %r." %(arg1, arg2)

def print_one(arg1):
    print "arg1: %r." %(arg1)

def print_none():
    print "I got nothing."

print_two("Hell", "Yes")
print_two_again("Hell","No")
print_one("Fuckya!")
print_none()


#Lesson 19,
def Cheese_and_crackers(cheese_count, boxes_of_crackers):
    print "You have %d cheese." %cheese_count
    print "You have %d crackers." %boxes_of_crackers
    print "Lets party!"

print "We can just give the function numbers directly:"
Cheese_and_crackers(20,20)

print "OR, we can use variables from our script:"
amount_of_cheese = 30
amount_of_crackers = 50

Cheese_and_crackers(amount_of_cheese, amount_of_crackers)

print "We can even do math inside:"
Cheese_and_crackers(3+3, 10+10)


#Lesson 20
#Import Modules
from sys import argv

script, input_file = argv

#Write Definitions, Functions, and global vars
def print_all(file):
    print file.read()

def rewind(file):
    file.seek(0)
    
def print_a_line(line_count, thefile):
    print line_count, thefile.readline()

#Execute Script
current_file = open(input_file) #opens the file into a file object

print "First, let's print the whole file: \n"
print_all(current_file)

print "Now, let's rewind, kind of like tape."
rewind(current_file)

print "Now, let's print the first 3 lines.\n"
current_line = 1
print_a_line(current_line, current_file)

current_line = current_line + 1
print_a_line(current_line, current_file)

current_line = current_line + 1
print_a_line(current_line, current_file)

print current_file.readline()


Lesson 21
#Define Functions and Globals

def add(a,b):
    print "Adding %d + %d." %(a,b)
    return a+b

def subtract(a,b):
    print "Subtracting %d - %d." % (a,b)
    return a-b

def multiply(a,b):
    print "Multiplying %d * %d." %(a,b)
    return a*b

def divide(a,b):
    print "Dividing %d / %d." %(a,b)
    return a / b

print "Let's do some math with functions!"

age = add(30,5)
height = subtract(78,7)
weight = multiply(2.2, 70)
iq = divide(200,2)

print "Age: %d; Height: %d; Weight: %d; and, IQ: %d." %(age,height, weight, iq)

print "Here is a puzzle."
what = add(age, subtract(height, multiply(weight, divide(iq,2))))
print "That becomes: ", what, "Can you do it by hand?"

How can I use raw_input() to enter my own values?
Remember int(raw_input())? But, the problem with that is then you can't enter floating point, so also try using float(raw_input()) instead.



#Lesson 22
print "Let's practice everything!"
print 'You\'d need to know \'bout escapes with \\ that do \n newlines and \t tabs.'

poem = '''
\t the Lovely world
with logic so firmly \n Cannot believe
\n\t\t bullshit.
'''

print "---------"
print poem
print "---------"

five = 10-2+3-6
print "This should be five: %d" %five

def secret_formula(started):
    jelly_beans = started *500
    jars = jelly_beans /1000
    crates = jars /100
    return jelly_beans, jars, crates

start_point = 10000
beans, jars, crates = secret_formula(start_point)

print "With a starting point of: %d" % start_point
print "We'd have %d beans, %d jars, and %d crates." %(beans, jars, crates)

print "We can also do it this way:"
start_point = start_point /10
print "We'd have %d beans, %d jars, and %d crates." %secret_formula(start_point)

#Lesson 25
def Break_words(stuff):
    words = stuff.split(' ')
    return words

def Sort_words(words):
    return sorted(words)

def Print_first_word(words):
    #Prints first word after popping it off
    word = words.pop(0)
    print word

def Print_last_word(words):
    word = words.pop(-1)
    print word

def Sort_sentance(sentance):
    #takes full sentance, and returns sorted words
    words = Break_words(sentance)
    return Sort_words(words)

def Print_first_and_last(sentance):
    words = Break_words(sentance)
    Print_first_word(words)
    Print_last_word(words)

def Print_first_last_sorted(sentance):
    words = Sort_sentance(sentance)
    Print_first_word(words)
    Print_last_word(words)
    

#Lesson 26
Exercise 28: Boolean Practice
The logic combinations you learned from the last exercise are called "boolean" logic expressions. Boolean logic is used everywhere in programming. They are essential fundamental parts of computation and knowing them very well is akin to knowing your scales in music.

In this exercise you will be taking the logic exercises you memorized and start trying them out in python. Take each of these logic problems, and write out what you think the answer will be. In each case it will be either True or False. Once you have the answers written down, you will start python in your terminal and type them in to confirm your answers.

True and True
False and True
1 == 1 and 2 == 1
"test" == "test"
1 == 1 or 2 != 1
True and 1 == 1
False and 0 != 0
True or 1 == 1
"test" == "testing"
1 != 0 and 2 == 1
"test" != "testing"
"test" == 1
not (True and False)
not (1 == 1 and 0 != 1)
not (10 == 1 or 1000 == 1000)
not (1 != 10 or 3 == 4)
not ("testing" == "testing" and "Zed" == "Cool Guy")
1 == 1 and not ("testing" == 1 or 1 == 0)
"chunky" == "bacon" and not (3 == 4 or 3 == 3)
3 == 3 and not ("testing" == "testing" or "Python" == "Fun")

#Lesson 29 if statements
#Define Imports

#Define Global Variables
people = 20
cats = 30
dogs = 15

#Define Functions
if people < cats:
    print "Too many cats!"

if people > cats:
    print "People over cats!"

if people > dogs:
    print "The world is dry!"
    
if people < dogs:
    print "The word is drooled on!"

dogs += 5

if people >= dogs:
    print "People are greater than or equal to dogs."

if people <= dogs:
    print "People are less than or equalt to dogs."
 
if people == dogs:
    print "People are dogs."

#Execution
 
 
 Lesson 30 
 #Import Modules
#Global Vars
#Define Functions
#Execution

people = 30
cars =40
buses = 15

if cars > people:
    print "We should take cars."
elif cars < people:
    print "We should not take cars."
else:
    print "We can't decide."

if buses > cars:
    print "Thats too many buses!"
elif buses < cars:
    print "Maybe we should take the bus."
else:
    print "We still can't decide."

if people > buses:
    print "Let's just take the buses."
else:
    print "Let's just stay home."
    
    
    
#Lesson 31

print "You enter a dark room with 2 doors. Go to Door#1 or Door#2? "
door_choice = raw_input(">>>")

if door_choice =="1":
    print "There's a giant bear here eating a cheese cake.  What do you do?"
    print "1. Take the cake."
    print "2. Scream at the bear."
    bear_choice = raw_input(">>>")
    
    if bear_choice == "1":
        print "The bear eats your face off.  Good job!"
    elif bear_choice == "2":
        print "The bear eats your legs off.  Good job!"
    else:
        print "Well, doing %s is probably better.  Bear runs away." % bear_choice
        
elif door_choice == "2":
    print "You stare into the endless abyss at Cthulhu's retina."
    print "1. Blueberries."
    print "2. Yellow jacket clothespins."
    print "3. Understanding revolvers yelling melodies."
    insanity_choice = raw_input(">>>")
    
    if insanity_choice == '1' or insanity_choice == "2":
        print "Your body survives powered by a mind of jello.  Good job!"
    else:
        print "The insanity rots your eyes into a pool of muck.  Good job!"

else:
    print "You stumble around and fall on a knife and die.  Good job!"
    
    

#Lesson 32 -- lists and arrays
'''
hairs = ['brown', 'blond','red']
eyes = ['brown','blue','green']
weights = [1,2,3,4]
'''

the_count = [1,2,3,4,5]
fruits = ['apples','oranges', 'pears', 'apricots']
change = [1,'pennies', 2,'dimes',3,'quarters']

for entry in the_count:
    print "This is count %d." %entry

for fruit in fruits:
    print "This is fruit: %s." %fruit
    
for entry in change:
    print "I got %r." %entry

#We can also build lists, start by initializing an empty list
elements = []

for i in range(0,6):
    print "Adding %r to the list." %i
    elements.append(i)

for i in elements:
    print "And, the element is %i." %i 
    
#Lesosn 33, while loops
i = 0
numbers = []

while i < 6:
    print "At the top i is %d" %i
    numbers.append(i)

    i = i+1
    print "Numbers now: ", numbers
    print "At the bottom i is %d" %i


print "The numbers FINALLY: "

for num in numbers:
    print num
    
#Lesson 34
#Include Modules
from sys import exit

#Define Global Variables
prompt = ">>>"

#Define Functions
def gold_room():
    print "You are in a room full of Gold.  How much do you take?"
    
    user_choice = raw_input(prompt)
    if '0' in user_choice or '1' in user_choice:
        how_much = int(user_choice)
    else:
        dead("Man! Learn to type a number!")
    
    if how_much < 50:
        print "Nice! You're not greedy, you win!"
        exit(0)
    else:
        dead("You greedy bastard!")

def bear_room():
    print "There is a bear here."
    print "The bear has a bunch of honey."
    print "The fat bear is in front of another door."
    print "How are you going to move the bear?"
    bear_moved = False
    
    #A while loop in this case is a great way to make a list that repeats itself until it gets an input it can handle
    while True:
        user_choice = raw_input(prompt)
        
        if user_choice == 'take honey':
            dead("The bear looks at you and slaps your face off!")
        elif user_choice == 'taunt bear' and not bear_moved:
            print "The bear moved. Go through door."
            bear_moved = True
        elif user_choice == 'taunt bear' and bear_moved:
            dead("Bear pissed and chews your leg off!")
        elif user_choice == 'open door' and bear_moved:
            gold_room()
        else:
            print "I got no idea what that means."

def cthulhu_room():
    print "Here you see the great evil Cthulhu."
    print "He, it, whatever stares at you and you go insane."
    print "Do you flee for your life or eat your head?"

    user_choice = raw_input(prompt)
    
    if 'flee' in user_choice:
        start()
    elif 'head' in user_choice:
        dead("Well that was tasty!")
    else:
        cthulhu_room()
        
def dead(why):
    print why, "Good Job Ass!"
    exit(0)

def start():
    print "You are in a dark room."
    print "There is a door to your right and left."
    print "Which one do you take?"
    
    user_choice = raw_input(prompt)
    
    if user_choice == 'left':
        bear_room()
    elif user_choice == 'right':
        gold_room()
    else:
        dead("You stumble around the room until you starve.")
        
#Execuation
start()
    
        
        
        
        
    
    
#lesson 27
Keywords
and 
del -- 
from -- from package import module
not 
while
as
elif
global
or
with
assert
else
if
pass
yield
break
except
import
print
class
exec
in
raise
continue
finally
is
return
def
for
lambda
try
Data Types
For data types, write out what makes up each one. For example, with strings write out how you create a string. For numbers write out a few numbers.

True
False
None
strings
numbers
floats
lists
String Escapes Sequences
For string escape sequences, use them in strings to make sure they do what you think they do.

\\
\'
\"
\a
\b
\f
\n
\r
\t
\v
String Formats
Same thing for string formats: use them in some strings to know what they do.

%d
%i
%o
%u
%x
%X
%e
%E
%f
%F
%g
%G
%c
%r
%s
%%
Operators
Some of these may be unfamiliar to you, but look them up anyway. Find out what they do, and if you still can't figure it out, save it for later.

+
-
*
**
/
//
%
<
>
<=
>=
==
!=
<>
( )
[ ]
{ }
@
,
:
.
=
;
+=
-=
*=
/=
//=
%=
**=


#Lesson 37: Lists
ten_things  = "Apples Oranges Crows Telephone Light Sugar"

print "Wait, not 10 things, let's fix that."

stuff = ten_things.split()
more_stuff = ["Day", "Night", "Song", "Frisbee", "Corn", "Banana", "Girl", "Boy"]

while len(stuff) != 10:
    next_one = more_stuff.pop()
    print "Adding: ", next_one
    stuff.append(next_one)
    print "There's %d items now." %len(stuff)

print "There we go: ", stuff

print "Let's do some more stuff."

print stuff[1]
print stuff [-1]
print stuff.pop()
print " ".join(stuff)
print '#'.join(stuff[3:5])


#Lesson 38, Dictionaries
What is the difference between a list and a dictionary?
A list is for an ordered list of items. A dictionary (or dict) is for matching some items (called "keys") to other items (called "values").
What would I use a dictionary for?
Any time you have to take one value, and "look up" another value. In fact you could call dictionaries "look up tables".
What would I use a list for?
A list is for any sequence of things that need to go in order, and you only need to look them up by a numeric index.
What if I need a dictionary, but I need it to be in order?
Take a look at the collections.OrderedDict data structure in Python. Search for it online to find the documentation.
letters = ['a','b','c','d','e']

dictionary = {'name': 'Zed', 'age': 36, 'height': 6*12+2}


++++++++

#First  create a mapping from states to their abbreviations
states_abbrev = {
     'Oregan': "OR",
     "Florida" : "FL",
     "California" : "CA",
     "New York": 'NY',
     'Michigan': "MI"
     }


#Second, create dictionary of cities within states
abbrev_cities = {
          "CA": "San Fran",
          'MI': 'Detriot',
          'FL':'Jacksonville',}

#Add some more cities
abbrev_cities['NY'] = "New York"
abbrev_cities['OR'] = "Portland"

#Print some cities
print '-' * 10
print "NY State has: ", abbrev_cities['NY']
print "OR State has: ", abbrev_cities["OR"]

#Print Some states
print '-' * 10
print "Michigan's abbreviation is ", states_abbrev['Michigan']
print "Florida's abbreviation is ", states_abbrev['Florida']

#Do it by nesting dicitonary calls:
print '-' *10
print "Michigan has: ", abbrev_cities[states_abbrev['Michigan']]
print "Florida has ", abbrev_cities[states_abbrev['Florida']]

#Printing Every State's Abbreviation
print '-' *10

for state, abbrev in states_abbrev.items():
    print "%s is abbreviated %s." %(state, abbrev)
    
#Printing Every City in a State
print '-' *10

for abbrev, cities in abbrev_cities.items():
    print "%s is in %s." %(cities, abbrev)

#Now, do both at the same time
print '-' *10

for state, abbrev in states_abbrev.items():
    print "%s state is abbreviated %s and has city %s." %(state, abbrev, abbrev_cities[abbrev])
      

#How to lookup state without getting an exception
print '-' * 10
statename = states_abbrev.get('Texas', None)

if not state:
    print "Sorry, no Texas."

#Get a city with a default value
city = abbrev_cities.get('TX', "Does not Exist.")
print "The city for the state of texas is %s :" % city



++++++++
Lesson 40, modules OOP, object oriented programming.
'''
Created on Feb 20, 2013

@author: nimave
I now have three ways to "get things from things":

# dict style
mystuff['apples']

# module style
mystuff.apples()
print mystuff.tangerine

# class style
thing = MyStuff()
thing.apples()
print thing.tangerine


def apple():
    print "I AM APPLES!"
    
tangerine  = "Living reflection of a dream."
class MyStuff(object):

    def __init__(self):
        self.tangerine = "And now a thousand years between"

    def apple(self):
        print "I AM CLASSY APPLES!"
'''

class Song(object):
    
    def __init__(self,lyrics):
        self.lyrics = lyrics
    
    def sing_me_a_song(self):
        for line in self.lyrics:
            print line

happy_bday = Song(["Happy birthday to you",
                   "I don't want to get sued",
                   "So I'll stop right there"])
bulls_on_parage = Song(["They rally around their families",
                        "With a pocket full of shells"])

++++++++++++++


import random
from urllib import urlopen
import sys

WORD_URL = "http://learncodethehardway.org/words.txt"
WORDS = []

PHRASES = {
    "class ###(###):":
      "Make a class named ### that is-a ###.",
    "class ###(object):\n\tdef __init__(self, ***)" :
      "class ### has-a __init__ that takes self and *** parameters.",
    "class ###(object):\n\tdef ***(self, @@@)":
      "class ### has-a function named *** that takes self and @@@ parameters.",
    "*** = ###()":
      "Set *** to an instance of class ###.",
    "***.***(@@@)":
      "From *** get the *** function, and call it with parameters self, @@@.",
    "***.*** = '***'":
      "From *** get the *** attribute and set it to '***'."
}

# do they want to drill phrases first
PHRASE_FIRST = False
if len(sys.argv) == 2 and sys.argv[1] == "english":
    PHRASE_FIRST = True

# load up the words from the website
for word in urlopen(WORD_URL).readlines():
    WORDS.append(word.strip())


def convert(snippet, phrase):
    class_names = [w.capitalize() for w in
                   random.sample(WORDS, snippet.count("###"))]
    other_names = random.sample(WORDS, snippet.count("***"))
    results = []
    param_names = []

    for i in range(0, snippet.count("@@@")):
        param_count = random.randint(1,3)
        param_names.append(', '.join(random.sample(WORDS, param_count)))

    for sentence in snippet, phrase:
        result = sentence[:]

        # fake class names
        for word in class_names:
            result = result.replace("###", word, 1)

        # fake other names
        for word in other_names:
            result = result.replace("***", word, 1)

        # fake parameter lists
        for word in param_names:
            result = result.replace("@@@", word, 1)

        results.append(result)

    return results


# keep going until they hit CTRL-D
try:
    while True:
        snippets = PHRASES.keys()
        random.shuffle(snippets)

        for snippet in snippets:
            phrase = PHRASES[snippet]
            question, answer = convert(snippet, phrase)
            if PHRASE_FIRST:
                question, answer = answer, question

            print question

            raw_input("> ")
            print "ANSWER:  %s\n\n" % answer
except EOFError:
    print "\nBye"
    
    
    
    +++++
    
    Lesson 42
    ## Animal is-a object (yes, sort of confusing) look at the extra credit
class Animal(object):
    pass


class Dog(Animal):
    def __init__(self, name):
        self.name = name

class Cat(Animal):
    def __init__(self, name):
        self.name = name

class Person(object):
    def __init__(self, name):
        self.name = name
        self.pet = None
        #Person has some pet, initialized to none     
        
    
class Employee(Person):
    def __init__(self, name, salary):
        super(Employee, self).__init__(name)
        self.salary = salary

class Fish(object):
    pass

class Salmon(Fish):
    pass

class Halibut(Fish):
    pass

rover = Dog("Rover")
satan = Cat("Satan")
mary = Person("Mary")
mary.pet = satan

frank = Employee("Frank", 120000)
frank.pet = rover

flipper = Fish()
crouse = Salmon()
harry = Halibut()
        
        
        ++++
        Lesson 43
class Engine(object):
    def __init__(self, scene_map):
        pass
    
    def play(self):
        pass
    
class Scene(object):
    def enter(self):
        pass

class Death(Scene):
    def enter(self):
        pass

class CentralCorridor(Scene):
    def enter(self):
        pass

class LaserWeaponArmory(Scene):
    def enter(self):
        pass

class TheBridge(Scene):
    def enter(self):
        pass

class EscapePod(Scene):
    def enter(self):
        pass

class Map(object):
    def __init__(self, start_scene):
        pass
    
    def next_scene(self, scene_name):
        pass
    
    def opening_scene(self):
        pass

a_map = Map('central corridor')
a_game = Engine(a_map)
a_game.play()
print "IT worked!"
        ++++++++++++++++++++++++++
        #Include Modules and Packages first
from sys import exit
from random import randint



class Engine(object):
    def __init__(self, scene_map):
        self.scene_map = scene_map
    
    def play(self):
        current_scene = self.scene_map.opening_scene()
        
        while True:
            print "\n--------"
            next_scene_name = current_scene.enter()
            current_scene = self.scene_map.next_scene(next_scene_name)
            
    
#The Scene class is the basic class for rooms in our maze
class Scene(object):
    def enter(self):
        print "This scene is not yet configured. Subclass it and implement enter()."
        exit(1)
        #since any future enter(self) functions will override the current one.
        

class Death(Scene):
    quips = [
        "You died.  You kinda suck at this.",
         "Your mom would be proud...if she were smarter.",
         "Such a luser.",
         "I have a small puppy that's better at this."
    ]
    
    def enter(self):
        print Death.quips[randint(0, len(self.quips)-1 )]
        exit(1)

class CentralCorridor(Scene):
    def enter(self):
        print "The Gothons of Planet Percal #25 have invaded your ship and destroyed"
        print "your entire crew.  You are the last surviving member and your last"
        print "mission is to get the neutron destruct bomb from the Weapons Armory,"
        print "put it in the bridge, and blow the ship up after getting into an "
        print "escape pod."
        print "\n"
        print "You're running down the central corridor to the Weapons Armory when"
        print "a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume"
        print "flowing around his hate filled body.  He's blocking the door to the"
        print "Armory and about to pull a weapon to blast you."
    
        action = raw_input(">>>")
        
        if action == 'shoot!':
            print "Quick on the draw you yank out your blaster and fire it at the Gothon."
            print "His clown costume is flowing and moving around his body, which throws"
            print "off your aim.  Your laser hits his costume but misses him entirely.  This"
            print "completely ruins his brand new costume his mother bought him, which"
            print "makes him fly into an insane rage and blast you repeatedly in the face until"
            print "you are dead.  Then he eats you."
            return 'death'
        elif action == 'dodge!':
            print "Like a world class boxer you dodge, weave, slip and slide right"
            print "as the Gothon's blaster cranks a laser past your head."
            print "In the middle of your artful dodge your foot slips and you"
            print "bang your head on the metal wall and pass out."
            print "You wake up shortly after only to die as the Gothon stomps on"
            print "your head and eats you."
            return 'death'
        elif action == "tell a joke":
            print "Lucky for you they made you learn Gothon insults in the academy."
            print "You tell the one Gothon joke you know:"
            print "Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr."
            print "The Gothon stops, tries not to laugh, then busts out laughing and can't move."
            print "While he's laughing you run up and shoot him square in the head"
            print "putting him down, then jump through the Weapon Armory door."
            return 'laser_weapon_armory'

        else:
            print "DOES NOT COMPUTE!"
            return 'central_corridor'
        


class LaserWeaponArmory(Scene):
    def enter(self):
        print "You do a dive roll into the Weapon Armory, crouch and scan the room"
        print "for more Gothons that might be hiding.  It's dead quiet, too quiet."
        print "You stand up and run to the far side of the room and find the"
        print "neutron bomb in its container.  There's a keypad lock on the box"
        print "and you need the code to get the bomb out.  If you get the code"
        print "wrong 10 times then the lock closes forever and you can't"
        print "get the bomb.  The code is 3 digits."
        
        code = "%d%d%d" %(randint(1,9), randint(1,9), randint(1,9))
        
        guess = raw_input('[KEYPAD]>>>')
        guesses = 0
        
        while guess != code and guesses <10 :
            print "BZZZD!"
            guesses  = guesses + 1
            guess = raw_input('[KEYPAD]>>>')
        
        if guess == code:
            print "The container clicks open and the seal breaks, letting gas out."
            print "You grab the neutron bomb and run as fast as you can to the"
            print "bridge where you must place it in the right spot."
            return 'the_bridge'
        else:
            print "The lock buzzes one last time and then you hear a sickening"
            print "melting sound as the mechanism is fused together."
            print "You decide to sit there, and finally the Gothons blow up the"
            print "ship from their ship and you die."
            return 'death'
        

class TheBridge(Scene):
    def enter(self):
        
        print "You burst onto the Bridge with the netron destruct bomb"
        print "under your arm and surprise 5 Gothons who are trying to"
        print "take control of the ship.  Each of them has an even uglier"
        print "clown costume than the last.  They haven't pulled their"
        print "weapons out yet, as they see the active bomb under your"
        print "arm and don't want to set it off."

        action = raw_input("> ")

        if action == "throw the bomb":
            print "In a panic you throw the bomb at the group of Gothons"
            print "and make a leap for the door.  Right as you drop it a"
            print "Gothon shoots you right in the back killing you."
            print "As you die you see another Gothon frantically try to disarm"
            print "the bomb. You die knowing they will probably blow up when"
            print "it goes off."
            return 'death'

        elif action == "slowly place the bomb":
            print "You point your blaster at the bomb under your arm"
            print "and the Gothons put their hands up and start to sweat."
            print "You inch backward to the door, open it, and then carefully"
            print "place the bomb on the floor, pointing your blaster at it."
            print "You then jump back through the door, punch the close button"
            print "and blast the lock so the Gothons can't get out."
            print "Now that the bomb is placed you run to the escape pod to"
            print "get off this tin can."
            return 'escape_pod'
        else:
            print "DOES NOT COMPUTE!"
            return "the_bridge"


class EscapePod(Scene):
    def enter(self):
        print "You rush through the ship desperately trying to make it to"
        print "the escape pod before the whole ship explodes.  It seems like"
        print "hardly any Gothons are on the ship, so your run is clear of"
        print "interference.  You get to the chamber with the escape pods, and"
        print "now need to pick one to take.  Some of them could be damaged"
        print "but you don't have time to look.  There's 5 pods, which one"
        print "do you take?"

        good_pod = randint(1,5)
        guess = raw_input("[POD #]> ")


        if int(guess) != good_pod:
            print "You jump into pod %s and hit the eject button." % guess
            print "The pod escapes out into the void of space, then"
            print "implodes as the hull ruptures, crushing your body"
            print "into jam jelly."
            return 'death'
        else:
            print "You jump into pod %s and hit the eject button." % guess
            print "The pod easily slides out into space heading to"
            print "the planet below.  As it flies to the planet, you look"
            print "back and see your ship implode then explode like a"
            print "bright star, taking out the Gothon ship at the same"
            print "time.  You won!"


            return 'finished'


class Map(object):
    scenes = {
        'central_corridor': CentralCorridor(),
        'laser_weapon_armory': LaserWeaponArmory(),
        'the_bridge': TheBridge(),
        'escape_pod': EscapePod(),
        'death': Death()
     }
     
    def __init__(self, start_scene):
        self.start_scene = start_scene

    def next_scene(self, scene_name):
        return Map.scenes.get(scene_name)

    def opening_scene(self):
        return self.next_scene(self.start_scene)


a_map = Map('central corridor')
a_game = Engine(a_map)
a_game.play()
print "IT worked!"
        
        ++++++++++++++
        ++++++++++++++
        Composition
Inheritance is useful, but another way to do the exact same thing is just to use other classes and modules, rather than rely on implicit inheritance. If you look at the three ways to exploit inheritance, two of the three involve writing new code to replace or alter functionality. This can easily be replicated by just calling functions in a module. Here's an example of doing this:

class Other(object):

    def override(self):
        print "OTHER override()"

    def implicit(self):
        print "OTHER implicit()"

    def altered(self):
        print "OTHER altered()"

class Child(object):

    def __init__(self):
        self.other = Other()

    def implicit(self):
        self.other.implicit()

    def override(self):
        print "CHILD override()"

    def altered(self):
        print "CHILD, BEFORE OTHER altered()"
        self.other.altered()
        print "CHILD, AFTER OTHER altered()"

son = Child()

son.implicit()
son.override()
son.altered()
In this code I'm not using the name Parent, since there is not a parent-child is-a relationship. This is a has-a relationship, where Child has-a Other that it uses to get its work done. When I run this I get the following output:

$ python ex44e.py
OTHER implicit()
CHILD override()
CHILD, BEFORE OTHER altered()
OTHER altered()
CHILD, AFTER OTHER altered()



++++++++++
+++++++++++
FIRST WEBPAGE
++++++++++++
index.html

$def with (greetin)

<html>
    <head>
        <title>Gothons Of Planet Percal #25</title>
    </head>
<body>

$if greetin:
    I just wanted to say <em style="color: green; font-size: 2em;">$greetin</em>.
$else:
    <em>Hello</em>, world!
    
<a href="/hello"> to try saying hello again?</a>

</body>
</html>

hello_form.html

<html>
    <head>
        <title>Sample Web Form</title>
    </head>
<body>

<h1>Fill Out This Form</h1>

<form action="/hello" method="POST">
    A Greeting: <input type="text" name="greet">
    <br/>
    Your Name: <input type="text" name="name">
    <br/>
    <input type="submit">
</form>

</body>
</html>



app.py
#IMPORT MODULES
import web

#GLOBAL VARS
#This URL mapping means that anytime / is called, which is usually the default, we go to class "index"
urls = (
        '/', 'index',
        '/hello', 'Index',
        
        )

app = web.application(urls, globals())

#render the webpage template
render = web.template.render('templates/')



#DEFINE CLASSES
#Page 0, default index page
class index:
    #when the class is tapped, the GET function is executed on the self object
    def GET(self):
        message_to_send = "Hello World"
        message_to_send = 1
        return render.index(greetin = message_to_send)

#Page 1, page returned from index template rendered in a different way, if /home url requested
class Index(object):
    def GET(self):
        return render.hello_form()
        #The hello_form() takes no inputs
        '''
        form = web.input(greet = None, name="Nobody")
        if form.greet:
            greeting = "%s, %s" % (form.greet, form.name)
            return render.index(greetin = greeting)
        else:
            return "ERROR: greet is required."
        '''
    
    def POST(self):
        #once you POST submitted, in the hello_form, the following below is executed
        form = web.input(name = "Nobody", greet = "Hello")
        greeting = "%s, %s." %(form.greet, form.name)
        return render.index(greetin = greeting)

    
#RUNTIME
if __name__ == "__main__":
    app.run()
    



#README FILE
'''
    In your bin/app.py you've added a new variable render which is a web.template.render object.
This render object knows how to load .html files out of the templates/ directory because you passed that to it as a parameter.
Later in your code, when the browser hits the index.GET like before, instead of just returning the string greeting, you call render.index and pass the greeting to it as a variable.
This render.index method is kind of a magic function where the render object sees that you're asking for index, goes into the templates/ directory, looks for a page named index.html, and then "renders" it, or converts it.
In the templates/index.html file you see the beginning definition that says this template takes a greeting parameter, just like a function. Also, just like Python this template is indentation sensitive, so make sure you get them right.
Finally, you have the HTML in templates/index.html that looks at the greeting variable, and if it's there, prints one message using the $greeting, or a default message.
class index:
    #when the class is tapped, the GET function is executed on the self object
    def GET(self):
        message_to_send = "Hello World"
        message_to_send = 1
        return render.index(greetin = message_to_send)
        
        Let's break down the changes I made to your script.

Instead of just a string for greeting I'm now using web.input to get data from the browser. This function takes a key=value set of defaults, parses the ?name=Frank part of the URL you give it, and then returns a nice object for you to work with that represents those values.
I then construct the greeting from the new form.name attribute of the form object, which should be very familiar to you by now.
Everything else about the file is the same as before.

class Index(object):
    def GET(self):
        #Can take input directly from url, http://0.0.0.0:8080/hello?name=Frank
        form = web.input(greet = None, name="Nobody")
        if form.greet:
            greeting = "%s, %s" % (form.greet, form.name)
            return render.index(greetin = greeting)
        else:
            return "ERROR: greet is required."

'''

++++++++++++++++
++++++++++++++++
Second page
++++++++++++++++
                        

